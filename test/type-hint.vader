# vim:set et sw=4 ts=4 tw=79:

Given python (def foo no arg return str):
    def foo() -> str:
        pass

Execute:
    Pydocstring

Expect python:
    def foo() -> str:
        """foo

        :rtype: str
        """
        pass

Given python (def foo with 1 arg return str):
    def foo(sample_var) -> str:
        pass
Execute:
    Pydocstring

Expect python:
    def foo(sample_var) -> str:
        """foo

        :param sample_var:
        :rtype: str
        """
        pass

Given python (def foo 2 args return str):
    def foo(arg1, arg2) -> str:
        pass
Execute:
    Pydocstring

Expect python:
    def foo(arg1, arg2) -> str:
        """foo

        :param arg1:
        :param arg2:
        :rtype: str
        """
        pass

Given python (def foo 1 arg with type and return int):
    def foo(n: int) -> int:
        pass

Execute:
    Pydocstring

Expect python:
    def foo(n: int) -> int:
        """foo

        :param n:
        :type n: int
        :rtype: int
        """
        pass

Given python (def foo 2 args with type and return int):
    def foo(n: int, m: str) -> int:
        pass

Execute:
    Pydocstring

Expect python:
    def foo(n: int, m: str) -> int:
        """foo

        :param n:
        :type n: int
        :param m:
        :type m: str
        :rtype: int
        """
        pass


Given python (def foo 1 arg with type, 1 none, and return int):
    def foo(n: int, arg) -> int:
        pass

Execute:
    Pydocstring

Expect python:
    def foo(n: int, arg) -> int:
        """foo

        :param n:
        :type n: int
        :param arg:
        :rtype: int
        """
        pass

Given python (def foo 1 arg with type return Callable[int, str]):
    def foo(arg1: Callable[int, str]) -> List[int, str]:
        pass

Execute:
    Pydocstring

Expect python:
    def foo(arg1: Callable[int, str]) -> List[int, str]:
        """foo

        :param arg1:
        :type arg1: Callable[int, str]
        :rtype: List[int, str]
        """
        pass

Given python (def foo nested typed args):
    def foo(
        arg1: str,
        arg2: Callable[List[str, str], str, int],
        arg3,
        arg4: int,
        arg5,
        arg6: List[str, str, str]
    ):
        pass

Execute:
    Pydocstring

Expect python:
    def foo(
        arg1: str,
        arg2: Callable[List[str, str], str, int],
        arg3,
        arg4: int,
        arg5,
        arg6: List[str, str, str]
    ):
        """foo

        :param arg1:
        :type arg1: str
        :param arg2:
        :type arg2: Callable[List[str, str], str, int]
        :param arg3:
        :param arg4:
        :type arg4: int
        :param arg5:
        :param arg6:
        :type arg6: List[str, str, str]
        """
        pass



Given python (def foo typed args):
    def foo(arg1: str, arg2: int) -> str:
        pass

Execute:
    Pydocstring

Expect python:
    def foo(arg1: str, arg2: int) -> str:
        """foo

        :param arg1:
        :type arg1: str
        :param arg2:
        :type arg2: int
        :rtype: str
        """
        pass

Given python (def foo last arg is not typed):
    def foo(n: int, arg2: str, arg3):
        pass

Execute:
    Pydocstring

Expect python:
    def foo(n: int, arg2: str, arg3):
        """foo

        :param n:
        :type n: int
        :param arg2:
        :type arg2: str
        :param arg3:
        """
        pass

Given python (def foo last arg typed):
    def foo(
        arg,
        arg1: str,
        arg2: Callable[List[str, str], str, int],
        arg3,
        arg4: int
    ):
        pass

Execute:
    Pydocstring

Expect python:
    def foo(
        arg,
        arg1: str,
        arg2: Callable[List[str, str], str, int],
        arg3,
        arg4: int
    ):
        """foo

        :param arg:
        :param arg1:
        :type arg1: str
        :param arg2:
        :type arg2: Callable[List[str, str], str, int]
        :param arg3:
        :param arg4:
        :type arg4: int
        """
        pass

Given python (def foo last arg is nest typed):
    def foo(arg1: str, arg2: Callable[List[str, str], str, int]):
        pass

Execute:
    Pydocstring

Expect python:
    def foo(arg1: str, arg2: Callable[List[str, str], str, int]):
        """foo

        :param arg1:
        :type arg1: str
        :param arg2:
        :type arg2: Callable[List[str, str], str, int]
        """
        pass

Given python (def first has type, the rest is not):
    def foo(a: int, b, c) -> int:
        pass

Execute:
    Pydocstring

Expect python:
    def foo(a: int, b, c) -> int:
        """foo

        :param a:
        :type a: int
        :param b:
        :param c:
        :rtype: int
        """
        pass

Given python (keyword args):
    def foo(a, b: str = None):
        pass

Execute:
    Pydocstring

Expect python:
    def foo(a, b: str = None):
        """foo

        :param a:
        :param b:
        :type b: str
        """
        pass
