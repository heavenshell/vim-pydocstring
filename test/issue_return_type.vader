# vim:set et sw=4 ts=4 tw=79:
# Test for {{_returnType_}} not BCBreak.
Execute (Setup template dir):
    Save g:pydocstring_templates_dir
    let g:pydocstring_templates_dir = './templates/return_type/'

Given python (def foo no arg return str):
    def foo() -> str:
        pass

Execute:
    Pydocstring

Expect python:
    def foo() -> str:
        """foo

        :rtype: str
        """
        pass

Given python (def foo with 1 arg return str):
    def foo(sample_var) -> str:
        pass
Execute:
    Pydocstring

Expect python:
    def foo(sample_var) -> str:
        """foo

        :param sample_var:
        :rtype: str
        """
        pass

Given python (def foo 2 args return str):
    def foo(arg1, arg2) -> str:
        pass
Execute:
    Pydocstring

Expect python:
    def foo(arg1, arg2) -> str:
        """foo

        :param arg1:
        :param arg2:
        :rtype: str
        """
        pass

Given python (def foo 1 arg with type and return int):
    def foo(n: int) -> int:
        pass

Execute:
    Pydocstring

Expect python:
    def foo(n: int) -> int:
        """foo

        :param n:
        :type n: int
        :rtype: int
        """
        pass

Given python (def foo 2 args with type and return int):
    def foo(n: int, m: str) -> int:
        pass

Execute:
    Pydocstring

Expect python:
    def foo(n: int, m: str) -> int:
        """foo

        :param n:
        :type n: int
        :param m:
        :type m: str
        :rtype: int
        """
        pass


Given python (def foo 1 arg with type, 1 none, and return int):
    def foo(n: int, arg) -> int:
        pass

Execute:
    Pydocstring

Expect python:
    def foo(n: int, arg) -> int:
        """foo

        :param n:
        :type n: int
        :param arg:
        :rtype: int
        """
        pass

