# vim:set et sw=4 ts=4 tw=79:

Execute (Setup template dir):
    Save g:pydocstring_formatter
    let g:pydocstring_formatter = 'sphinx'

# Test def keyword
#-------------------------------------------------------------------------------
Given python (def foo):
    def foo():
        pass

Execute:
    :Pydocstring
    :sleep 1

Expect python:
    def foo():
        """foo."""
        pass

Given python (def foo with 1 param):
    def foo(arg):
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    def foo(arg):
        """foo.

        :param arg:
        """
        pass

Given python (def foo with 2 params):
    def foo(arg1, arg2):
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    def foo(arg1, arg2):
        """foo.

        :param arg1:
        :param arg2:
        """
        pass

Given python (def foo with 2 params and a comment block):
    def foo(arg1, arg2): # Something fun (just, for, test)
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    def foo(arg1, arg2): # Something fun (just, for, test)
        """foo.

        :param arg1:
        :param arg2:
        """
        pass

Given python (def foo with variadic params):
    def foo(*arg):
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    def foo(*arg):
        """foo.

        :param arg:
        """
        pass


# Test class keyword
#-------------------------------------------------------------------------------
Given python (class Foo no extends):
    class Foo:
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    class Foo:
        """Foo."""

        pass

Given python (class Foo extends multiple classes):
    class Foo(ClassA, ClassB, ClassC):
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    class Foo(ClassA, ClassB, ClassC):
        """Foo."""

        pass


Given python (class Foo):
    class Foo:
        def foo(self):
            pass

        def arg1(self, arg1):
            pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    class Foo:
        """Foo."""

        def foo(self):
            pass

        def arg1(self, arg1):
            pass


Given python (class Foo):
    class Foo:
        def foo(self):
            pass

        def arg1(self, arg1):
            pass

Do (Put cursor to def foo(self)):
    j

Then Execute (Execute Pydocstring on def foo(self)):
    :Pydocstring
    :sleep 500m

Expect python:
    class Foo:
        def foo(self):
            """foo."""
            pass

        def arg1(self, arg1):
            pass


Given python (class Foo):
    class Foo:
        def foo(self):
            pass

        def arg1(self, arg1):
            pass

Do (Put cursor to def arg1(self, arg1)):
    4j

Then Execute (Execute Pydocstring on def arg1(self, arg1)):
    :Pydocstring
    :sleep 500m

Expect python:
    class Foo:
        def foo(self):
            pass

        def arg1(self, arg1):
            """arg1.

            :param arg1:
            """
            pass

# Test aync/await keyword
#-------------------------------------------------------------------------------
Given python (async def foo):
    async def foo():
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    async def foo():
        """foo."""
        pass

# Test type hint
#-------------------------------------------------------------------------------
Given python (type hint arg):
    def foo(arg1: str):
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    def foo(arg1: str):
        """foo.

        :param arg1:
        :type arg1: str
        """
        pass

Given python (type hint args):
    def foo(arg1: str, arg2: int):
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    def foo(arg1: str, arg2: int):
        """foo.

        :param arg1:
        :type arg1: str
        :param arg2:
        :type arg2: int
        """
        pass

Given python (return type hint):
    def foo() -> str:
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    def foo() -> str:
        """foo.

        :rtype: str
        """
        pass

Given python (type hint and return type hint):
    def foo(arg1: str) -> str:
        pass

Execute:
    :Pydocstring
    :sleep 500m

Expect python:
    def foo(arg1: str) -> str:
        """foo.

        :param arg1:
        :type arg1: str
        :rtype: str
        """
        pass
